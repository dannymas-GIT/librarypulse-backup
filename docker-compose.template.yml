# IMPORTANT: This is a template configuration file.
# Copy this to docker-compose.yml and adjust settings as needed.
# Common Issues:
# 1. Port Mapping: Do not expose frontend port as it's accessed through the main Nginx reverse proxy
# 2. Network Configuration: Must be on the same network as the main Nginx reverse proxy
# 3. Environment Variables: Ensure proper API URLs and environment settings

services:
  frontend:
    build:
      context: ./frontend
      dockerfile: Dockerfile
    # NOTE: Do not expose ports - the service is accessed through the main Nginx reverse proxy
    environment:
      - NODE_ENV=production
      # Update API URL to match your domain and path
      - VITE_API_URL=https://your-domain.com/app/backup/api
    networks:
      # Must be on the same network as the main Nginx reverse proxy
      - app-network
    volumes:
      - ./frontend/nginx.conf:/etc/nginx/conf.d/default.conf:ro
    healthcheck:
      test: ["CMD", "wget", "-qO-", "http://localhost:80/health"]
      interval: 30s
      timeout: 10s
      retries: 3

  backend:
    build:
      context: ./backend
      dockerfile: Dockerfile
    environment:
      - DATABASE_URL=postgresql://postgres:${DB_PASSWORD}@backup-db:5432/librarypulse
      - SECRET_KEY=${SECRET_KEY}
      - CORS_ORIGINS=https://your-domain.com
    networks:
      - app-network
    depends_on:
      - backup-db

  backup-db:
    image: postgres:15-alpine
    volumes:
      - backup_postgres_data:/var/lib/postgresql/data
    environment:
      - POSTGRES_DB=librarypulse
      - POSTGRES_USER=postgres
      - POSTGRES_PASSWORD=${DB_PASSWORD}
    networks:
      - app-network

networks:
  app-network:
    # This network must match the main docker-compose network
    external: true
    name: docker-apps_app-network

volumes:
  backup_postgres_data:
